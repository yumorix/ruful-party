# 婚活イベント マッチングアプリ PRD

## 1. 概要

本アプリケーションは婚活イベント向けの参加者マッチングシステムで、複数のパーティを個別に管理できる機能を備えています。参加者間の「気になる人」投票を収集し、**ChatGPT**を活用して最適な席替えやマッチング結果を提供します。QRコードによる簡易アクセス方式を採用し、イベント運営をスムーズにします。

## 2. ユースケース

### 2.1 パーティ管理

- 複数パーティを個別に作成・管理
- パーティごとの参加者登録
- パーティごとのマッチング設定

### 2.2 中間マッチング投票

- パーティ中盤で参加者からマッチング希望を収集
- 投票結果を元にAIで席替え案を生成
- 男女交互の最適な席配置を実現

### 2.3 最終マッチング投票

- パーティ終盤で最終的なマッチング希望を収集
- AIによる自動マッチングを実施
- 相互希望を優先したペアリングを実現

## 3. 機能要件

### 3.1 パーティ管理機能

- 新規パーティの作成（名称、日時、場所、定員など）
- パーティごとの参加者管理
- パーティ状態管理（準備中、開催中、終了）
- パーティ別のマッチング設定

### 3.2 参加者アクセス

- パーティ固有のQRコードでアプリにアクセス
- QRコード読み込み時に参加者情報を自動認識
- 同一QRコードから中間/最終フォームへアクセス（モード切替は運営者が実施）

### 3.3 投票機能

- 気になった異性の参加者番号を3人まで選択可能
- 投票は優先順位付きで提出
- 提出後は同じ参加者からの再提出を防止
    - 提出済みの場合は「しばらくお待ちください」画面を表示

### 3.4 マッチング機能

- 男女を区別し、必ず異性同士のマッチングを実施
- AIによる最適なマッチング計算
- 中間マッチング：席替え案の生成
- 最終マッチング：カップル組み合わせの決定

### 3.5 結果表示

- 席替え結果：パーティ参加者全員が閲覧可能
- 最終マッチング：本人の結果のみ閲覧可能
- 席表の画像出力

### 3.6 管理機能

- パーティごとの投票モード切替（中間/最終/クローズ）
- パーティごとの参加者管理（追加/編集/削除）
- パーティごとのマッチング実行と結果確認
- パーティごとのQRコード一括生成

## 4. 技術仕様

### 4.1 技術スタック

- フロントエンド：Next.js (App Router）、TailwindCSS、react-hook-form + zod、pnpm
- バックエンド：Next.js Route Handlers
- データベース：Supabase
- デプロイ：Vercel

### 4.2 データモデル

**parties テーブル**

- id: ULID（プライマリキー）
- name: パーティ名
- date: 開催日時
- location: 開催場所
- capacity: 定員
- status: 'preparing'/'active'/'closed'（準備中/開催中/終了）
- current_mode: 'interim'/'final'/'closed'（投票モード）
- created_at: 作成日時
- updated_at: 更新日時

**participants テーブル**

- id: ULID（プライマリキー）
- party_id: パーティID（外部キー）
- participant_number: パーティ内での連番
- name: 参加者名
- gender: 'male'/'female'
- access_token: QRコード用トークン
- created_at: 作成日時

**votes テーブル**

- id: ULID（プライマリキー）
- party_id: パーティID（外部キー）
- voter_id: 投票者ID
- voted_id: 投票された人ID
- vote_type: 'interim'/'final'
- rank: 優先順位（1~3）
- created_at: 投票日時

**party_settings テーブル**

- id: ULID（プライマリキー）
- party_id: パーティID（外部キー）
- matching_rule: JSON（AIへのマッチングルール）
- seating_layout: JSON（座席レイアウト情報）
- gender_rules: JSON（性別に基づくマッチングルール）
- updated_at: 更新日時

**matches テーブル**

- id: ULID（プライマリキー）
- party_id: パーティID（外部キー）
- match_type: 'interim'/'final'
- participant1_id: 参加者1のID
- participant2_id: 参加者2のID
- table_number: テーブル番号
- seat_positions: JSON（座席位置情報）
- created_at: 作成日時

**seating_plans テーブル**

- id: ULID（プライマリキー）
- party_id: パーティID（外部キー）
- plan_type: 'interim'/'final'
- layout_data: JSON（全体の座席配置データ）
- image_url: 席表画像のURL
- created_at: 作成日時

###4.3 リポジトリの構成
- 管理画面とマッチングアプリは同じリポジトリで管理
- 管理画面はadminディレクトリに配置
- マッチングアプリはmatching-appディレクトリに配置
- マイグレーションは supabase/migrations に配置


## 5. ユーザーインターフェース

### 5.1 参加者向け画面

- 投票フォーム：パーティ内の異性参加者から最大3名選択
- 結果確認画面：自分のマッチング結果のみ表示
- 席表確認画面：パーティ全体の席配置を表示
- 基本的にスマホからのアクセスを想定

### 5.2 管理者向け画面

- パーティ一覧：全パーティの一覧と基本情報
- パーティ詳細：特定パーティの詳細情報
- 参加者管理：パーティごとの参加者一覧、追加、編集、QRコード生成
- 設定管理：パーティごとの投票モード切替、マッチングルール設定
- 結果管理：パーティごとのマッチング実行、結果確認、席表生成

## 6. サーバーコンポーネントとクライアントコンポーネント

### 6.1 サーバーコンポーネント

- ページルートコンポーネント (/app/**/page.tsx)
- データ取得関連コンポーネント
- 静的なUIコンポーネント
- レイアウトコンポーネント

### 6.2 クライアントコンポーネント ('use client')

- インタラクティブなフォームコンポーネント
- パーティ作成・編集フォーム
- 投票フォーム
- QRコード生成コンポーネント
- モーダルやポップアップ
- リアルタイム更新が必要なコンポーネント

## 8. AIマッチング設計

### 8.1 マッチングルール

- パーティごとにカスタマイズ可能なルール設定
- 相互に希望した参加者を優先的にマッチング
- 片思いの場合は優先順位を考慮
- 必ず異性同士のマッチングを実施
- 男女比が不均等な場合の調整ロジックを実装

### 8.2 席配置ルール

- パーティ会場ごとに柔軟なレイアウト設定
- 男女交互の座席配置
- 気になった相手の近くに配置するよう最適化
